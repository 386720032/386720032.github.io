<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于虚拟机 VMware 下的Ubuntn开机黑屏问题</title>
      <link href="2020/092257779.html"/>
      <url>2020/092257779.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>-在刚开始学习Linux系统的时候，安装配置环境遇到了很多让人心态爆炸的问题，各种bug不断其中一个主要问题就是在装了Ubuntn 12.04.2 -desktop 系统之后，刚安装完第一次开机的时候还好好的，后面关机了再次打开的时候就出现Ubuntn黑屏无法正常启动的问题,等了很久Ubuntn也没有启动，想关掉它却一直会显示虚拟机繁忙根本关不掉，除了重启电脑或者用任务管理器强行虚拟机结束进程一点办法没有，最烦人的是就算你重启或者用任务管理器关掉它之后照样开机还是黑屏，Ubuntn还是依然的打不开</strong><br><strong>-在经历了很长一段时间的折磨和煎熬之后，包括重装了几次虚拟机和Ubuntn,重装虚拟机和Ubuntn的话第一次开机是没问题的，但是关机后再开机还是会出现黑屏，后面还是通过万能的度娘把问题解决了</strong></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><strong>- 首先，在windows搜索框搜cmd</strong><br> <img src="https://img-blog.csdnimg.cn/20200401141039811.png" alt="1"><br><strong>然后以管理员身份进行</strong><br><img src="https://img-blog.csdnimg.cn/20200401141422551.png" alt="2"><br><strong>输入 net winsock reset</strong><br><img src="https://img-blog.csdnimg.cn/20200401141600238.png" alt="3"><br><strong>然后重启电脑<br>win+R然后输入msconfig<br>在服务里先把隐藏所有Microsoft 服务打勾，之后<br>再在里面找到所有带VMware 的把勾取消,就是把所有跟vmware相关的服务取消</strong><br><img src="https://img-blog.csdnimg.cn/20200401141654876.png"><br><strong>点击应用（一定要点），确定，然后重启电脑<br>重启后打开任务管理器发现所有vmware相关进程都没有启动<br>再次win+R打开msconfig,选中所有vmware相关服务,点击应用,启用vmware的服务,再次重启电脑<br>然后打开Ubuntn不会发生黑屏问题了，问题得以解决，通过这个方法过了一周到现在Ubuntn也没有再也发生过黑屏</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http知识</title>
      <link href="2020/092110111.html"/>
      <url>2020/092110111.html</url>
      
        <content type="html"><![CDATA[<h1 id="应用程序分类："><a href="#应用程序分类：" class="headerlink" title="应用程序分类："></a>应用程序分类：</h1><ul><li>B/S：Browser（浏览器）/ Server（服务器）  </li><li>C/S：Client（客户端）/ Server（服务器）</li></ul><h1 id="http协议：基于TCP-IP的’无状态’通信协议"><a href="#http协议：基于TCP-IP的’无状态’通信协议" class="headerlink" title="http协议：基于TCP/IP的’无状态’通信协议"></a>http协议：基于TCP/IP的’无状态’通信协议</h1><p>前端（浏览器客户端）向后台（web服务器端）发送http请求获取数据</p><h1 id="http请求报文："><a href="#http请求报文：" class="headerlink" title="http请求报文："></a>http请求报文：</h1><ul><li><p>一个HTTP请求报文由4个部分组成：</p></li><li><p>请求行（request line）、</p></li><li><p>请求头部（header）</p></li><li><p>空行</p></li><li><p>请求数据  </p></li><li><p>1.form的enctype属性为编码方式，常用有两种：</p><ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li></ul></li><li><p>2.默认为application/x-www-form-urlencoded。</p></li><li><p>3.当action为get时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&amp;name2=value2…），然后把这个字串追加到url后面，用?分割，加载这个新的url。</p></li><li><p>4.当action为post时候，浏览器把form数据封装到http body中，然后发送到server。 如果没有type=file的控件，用默认的application/x-www-form-urlencoded就可以了。 但是如果有type=file的话，就要用到multipart/form-data了。</p></li><li><p>5.当action为post且Content-Type类型是multipart/form-data，浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件name)等信息，并加上分割符(boundary)。</p><h1 id="http响应报文："><a href="#http响应报文：" class="headerlink" title="http响应报文："></a>http响应报文：</h1><p>Response Headers里的Content-Type指服务器告诉浏览器相应的数据，类型一般有这三种：</p></li><li><p>application/x-www-form-urlencoded：数据被编码为名称/值对。这是标准的编码格式</p></li><li><p>multipart/form-data： 数据被编码为一条消息，页上的每个控件对应消息中的一个部分</p></li><li><p>text/plain： 数据以纯文本形式(text/json/xml/html)进行编码，其中不含任何控件或格式字符</p><h1 id="Status-Code表示服务器发回的响应状态代码；"><a href="#Status-Code表示服务器发回的响应状态代码；" class="headerlink" title="Status-Code表示服务器发回的响应状态代码；"></a>Status-Code表示服务器发回的响应状态代码；</h1><h1 id="Reason-Phrase表示状态代码的文本描述。"><a href="#Reason-Phrase表示状态代码的文本描述。" class="headerlink" title="Reason-Phrase表示状态代码的文本描述。"></a>Reason-Phrase表示状态代码的文本描述。</h1><p>状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。<br>1xx：指示信息—表示请求已接收，继续处理。<br>2xx：成功—表示请求已被成功接收、理解、接受。<br>3xx：重定向—要完成请求必须进行更进一步的操作。<br>4xx：客户端错误—请求有语法错误或请求无法实现。<br>5xx：服务器端错误—服务器未能实现合法的请求。</p></li><li><p>常见状态代码、状态描述的说明如下。<br>200 OK：客户端请求成功。<br>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。<br>401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。<br>403 Forbidden：服务器收到请求，但是拒绝提供服务。<br>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。<br>500 Internal Server Error：服务器发生不可预期的错误。<br>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础知识(1)</title>
      <link href="2020/092157779.html"/>
      <url>2020/092157779.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础中的基础"><a href="#基础中的基础" class="headerlink" title="基础中的基础"></a>基础中的基础</h1><ul><li>解释型语言和编译型语言差距；<br><img src="https://img-blog.csdnimg.cn/20181026205213120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4enh6eDAxMTk=,size_27,color_FFFFFF,t_70">  </li><li>Python概述<br><img src="https://img-blog.csdnimg.cn/20181026205305245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4enh6eDAxMTk=,size_27,color_FFFFFF,t_70"></li><li>解释器执行原理<br><img src="https://img-blog.csdnimg.cn/20181026205829737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4enh6eDAxMTk=,size_27,color_FFFFFF,t_70"></li><li>which python3可以查看python3的位置(linux下)；  </li><li>交互式环境中使用exit()或者ctrl+D退出；  </li><li>9 // 2表示取结果的整数，乘方使用**；  </li><li>乘法可以用在 字符串中 也就是说 “_ “ * 5 会输出5个 “_”；  </li><li><strong>数据类型分为 数字型和非数字型: (1)数字型 : 整形、浮点型、布尔型、复数型。(2)非数字型: 字符串、列表、元组、字典。type(变量名)查看变量类型；</strong></li><li>python3中没有long，只有int；</li><li>变量的输入: input()函数。注意: input()函数输入的数据类型都是字符串类型；</li><li>在python中，如果变量名需要两个或多个单词组成时，可以按照下面的方式: ①每个单词都是小写；②单词和单词之间使用_下划线连接；③使用驼峰规则；</li><li>print函数如果不想输出换行，在后面加上一个end=””(例如print(“a”,end=””))；单纯的只想输出一个换行可以使用print()或者print(“”)；</li><li>\t(制表符(对齐))和\n转义字符；<br>关于函数的注释，写在函数的下面，加上三个”””。以及文档注释，例如：<pre><code>def sum_2_sum(a, b):  """计算a和b的和  :param a:第一个参数  :param b:第二个参数  :return:  """  return a + b</code></pre></li><li>因为函数体相对比较独立，函数定义的上方，应该和其他代码(包括注释)保留两个空行；</li><li>import导入的文件可以python解释器将模块解释成一个pyc二进制文件(类似Java的.class?)；</li><li>python中关键字后面不需要加括号(如del 关键字)；</li><li>方法和函数的异同: ①方法和函数类似，同样是封装了独立的功能；②方法需要通过对象来调用，表示针对这个对象要做的操作③函数需要记住，但是方法是对象的”函数”，方法不需要记住(IDE提示或者IPython中TAB补全)；</li><li>变量赋值的几种特殊的方式:<pre><code>a = b = c = 1  # 三个都是1a, b, c = 1, 2, "hello"  # a = 1, b = 2, c = "hello"</code></pre></li></ul><p>a, b = 0, 1<br>a, b = b, a+b  # 右边表达式的执行顺序是从左往右的。<br>“””<br>上面的代码类似:<br>n = b<br>m = a+b<br>a = n<br>b = m<br>“””<br>print(a)  # 1<br>print(b)  # 1</p><pre><code>- 逻辑运算符:and、or、not，成员运算符in、not in，身份运算符is、is not；# 列表、元组(tuple)、字典、集合、字符串- 列表可以嵌套；- ```x = [['a', 'b', 'c'], [1, 2, 3]]print(x[0])  # ['a', 'b', 'c']print(x[0][1])  # 'b'</code></pre><ul><li>元组不同于列表的是: 元组不能修改，用()表示；(不能增删改)  </li><li>元组一般保存不同类型的数据；  </li><li><strong>注意: 只有一个元素的元组: single_tuple = (5,) ，也就是说元组中只包含一个元素时，需要在元素后面添加逗号；不能这样写   single_tuple = (5)，这样是一个整形的变量；另外，创建元组也可以不加上括号；</strong><pre><code>tup = "a", "b", "c", "d"print(tup)print(type(tup))</code></pre></li></ul><p>tup2 = (“a”,)  # 一个元素的元组 (后面必须加上一个括号)<br>print(tup2)<br>print(type(tup2))</p><pre><code>输出:  </code></pre><p>(‘a’, ‘b’, ‘c’, ‘d’)<br>&lt;class ‘tuple’&gt;<br>(‘a’,)<br>&lt;class ‘tuple’&gt;</p><pre><code>- 元组的用途: ① 作为函数的参数和返回值；②格式化字符串(格式字符串本身就是一个元组)；(3)让列表不可以被修改，保护数据安全；- 格式化字符串和元组的关系，看下面的三个print输出是一样的:  </code></pre><h1 id="元组和格式化字符串的关系"><a href="#元组和格式化字符串的关系" class="headerlink" title="元组和格式化字符串的关系"></a>元组和格式化字符串的关系</h1><p>info_tuple = (“小明”, 21, 1.85)<br>print(“%s 年龄是 %d 身高是 %.2f” % (“小明”, 21, 1.85))<br>print(“%s 年龄是 %d 身高是 %.2f” % info_tuple)</p><p>info_str = “%s 年龄是 %d 身高是 %.2f” % info_tuple<br>print(info_str)</p><pre><code>- 元组和列表可以相互转换 : ①使用list(元组)将元组转换成列表；②使用tuple将列表转换成元组；  - 字典: ① 键必须是唯一的 ②值可以取任意类型，但是键只能使用字符串、数字或者元组(键只能是不可变类型)。  - **遍历字典的时候for k in dict 中的k是键，而不是值。（普通的for），不过也可以通过items()方法遍历键值对: **  </code></pre><p>dict_student = {‘name’: ‘xiaoming’, ‘age’: ‘18’, ‘qq’: “1234”}</p><h1 id="遍历方式一"><a href="#遍历方式一" class="headerlink" title="遍历方式一"></a>遍历方式一</h1><p>for k in dict_student:  # k 是key<br>    print(k, end=” “)<br>    print(dict_student[k])</p><p>print(“*” * 20)</p><h1 id="遍历方式二"><a href="#遍历方式二" class="headerlink" title="遍历方式二"></a>遍历方式二</h1><p>for k, v in dict_student.items():<br>    print(k, v)</p><pre><code>- 字符串中的转义字符：\n表示换行，而\r表示回车，字符串中的函数- - isspace()判断的时候\t\n\r都是表示的空白字符；    isdecimla()、isdigit()、isnumeric()都不能判断字符串中的小数，(可以判断字符串中的整数)；  - 集合set的使用: 可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。 集合还有一些方法add()、update()、pop()等；</code></pre><p>student = {‘Tom’, ‘Jim’, ‘Mary’, ‘Tom’, ‘Jack’, ‘Rose’}<br>print(student)  # 输出集合，重复的元素被自动去掉</p><p>if ‘Rose’ in student:<br>    print(‘Rose 在集合中’)<br>else:<br>    print(‘Rose 不在集合中’)</p><h1 id="set可以进行集合运算"><a href="#set可以进行集合运算" class="headerlink" title="set可以进行集合运算"></a>set可以进行集合运算</h1><p>a = set(‘abracadabra’)<br>b = set(‘alacazam’)</p><p>print(a - b)  # a和b的差集<br>print(a | b)  # a和b的并集<br>print(a &amp; b)  # a和b的交集<br>print(a ^ b)  # a和b中不同时存在的元素</p><pre><code>输出：  </code></pre><p>{‘Jim’, ‘Mary’, ‘Jack’, ‘Rose’, ‘Tom’}<br>Rose 在集合中<br>{‘b’, ‘d’, ‘r’}<br>{‘b’, ‘l’, ‘c’, ‘d’, ‘z’, ‘m’, ‘a’, ‘r’}<br>{‘c’, ‘a’}<br>{‘b’, ‘m’, ‘l’, ‘r’, ‘d’, ‘z’}</p><pre><code>- 相关公共方法: len、del、max、min(只会比较字典的key)；  - in、not in的使用(类似数据库…)；  - pass关键字的使用: 比如if … 下面没有写语句，python会提示报错，但是你可以写一个pass就不会报错了；也就是说如果在开发程序时，不希望立即编写分支内部的代码，可以使用pass作为一个占位符；可以保证程序代码结构正确；  - TODO关键字的使用，在编写程序框架的时候，可以用TODO标示某个地方还没有做某事；  - 迭代器的使用  </code></pre><p>import sys  # 引入 sys 模块</p><p>lst = [1, 2, 3, 4]<br>it = iter(lst)  # 创建迭代器对象</p><h1 id="使用for-遍历迭代器"><a href="#使用for-遍历迭代器" class="headerlink" title="使用for 遍历迭代器"></a>使用for 遍历迭代器</h1><p>for x in it:<br>    print(x, end=” “)<br>print()</p><p>it = iter(lst)  # 之前那个已经到了最后了，再次获取</p><h1 id="使用next-while遍历"><a href="#使用next-while遍历" class="headerlink" title="使用next + while遍历"></a>使用next + while遍历</h1><p>while True:<br>    try:<br>        print(next(it), end=” “)<br>    except StopIteration:  # 防止无限循环<br>        sys.exit()  # 退出程序<br>print()</p><pre><code>输出：  </code></pre><p>1 2 3 4<br>1 2 3 4 </p><pre><code>- 字符串中切片的使用: ①类似截取，但是可以指定步长；②python中支持倒序索引，最后一个是-1，倒数第二个是-2…；![](https://img-blog.csdnimg.cn/20181031112103587.png)</code></pre><h1 id="切片的使用"><a href="#切片的使用" class="headerlink" title="切片的使用"></a>切片的使用</h1><p>num_str = “12345678”</p><p>print(num_str[2:6])  # [2,5]<br>print(num_str[2:])  # 从2位置到结束<br>print(num_str[0:6])  # 输出[0,5]的<br>print(num_str[:6])  # 一开始到5的<br>print(num_str[:])  # 全部输出<br>print(num_str[::2])  # 指定步长  第三个参数指定步长<br>print(num_str[1::2])  # 从第一个开始　步长为2</p><p>print(“*” * 20)<br>print(num_str[-1])  # 输出最后一个位置的<br>print(num_str[2:-1])  # 从第二个开始到倒数第二个</p><p>print(“*” * 20)</p><h1 id="一个面试题-逆序输出"><a href="#一个面试题-逆序输出" class="headerlink" title="一个面试题 逆序输出"></a>一个面试题 逆序输出</h1><p>print(num_str[-1::-1])  # 步长为-1代表向左切片，从最后一个开始切<br>print(num_str[::-1])</p><pre><code>输出:</code></pre><p>3456<br>345678<br>123456<br>123456<br>12345678<br>1357<br>2468</p><hr><p>8<br>34567</p><hr><p>87654321<br>87654321</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基础 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 元组 </tag>
            
            <tag> 字典 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之快速排序</title>
      <link href="2020/081157779.html"/>
      <url>2020/081157779.html</url>
      
        <content type="html"><![CDATA[<h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序<br>1.任取一个元素 (如第一个) 为中心  </p><p>2.所有比它小的元素一律前放，比它大的元素一律后放，形成左右两个子表</p><p>3.对各子表重新选择中心元素并依此规则调整，直到每个子表的元素只剩一个</p><h1 id="划分过程中的实例："><a href="#划分过程中的实例：" class="headerlink" title="划分过程中的实例："></a>划分过程中的实例：</h1><p><img src="https://img-blog.csdnimg.cn/20200501001301270.png"><br><strong>算法分析</strong>：</p><p><strong>平均计算时间是O(nlog2n),就平均计算时间而言，快速排序是我们所讨论的所有内排序方法中最好的一个</strong></p><p><strong>时间效率</strong>: O(nlog2n) ,每趟确定的元素呈指数增加</p><p><strong>空间效率</strong>: O(log2n),递归要用到栈空间</p><p><strong>稳 定 性</strong>: 不稳定 ,可选任一元素为支点</p><p><strong>代码实现</strong>：  </p><pre><code>import java.util.Random;public class Quicksort {    public static void main(String[] args) {    int a[]=new int[10];     //声明创建长度为10的一维数组    Random ran=new Random();    int i;    //生成随机数组并输出    for(i=0;i&lt;a.length;i++)    {        a[i]=ran.nextInt(1000)+1;       // 把范围为1-1000的随机整数复制给a[i]        System.out.print(a[i]+" ");     // 输出a[i]    }     System.out.println();    quickSort(a,0,a.length-1);    System.out.println("快速排序后：");    for(int j:a)   //遍历排序后的数组                {        System.out.print(j+" ");    }  }    public static void quickSort(int a[],int l,int r)    {        int i,j,temp;        if(l&gt;=r) return ;  //只有一个记录或者无记录，则无需排序        i=l;        j=r;        temp=a[i];   //取a[i]为基准数             while(i!=j)        {            while(i&lt;j&amp;&amp;a[j]&gt;=temp) //找比基准数temp小的数            {                j--;            }            if(i&lt;j)                     a[i++]=a[j];                    while(i&lt;j&amp;&amp;a[i]&lt;=temp)  //找比基准数temp大的数            {                 i++;            }            if(i&lt;j)            a[j--]=a[i];        }        a[i]=temp;              //i为基准数temp放入的位置    quickSort(a,l,i-1);       //递归调用    quickSort(a,i+1,r);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Linux用C语言实现TCP半双工通信和UDP半双工通信</title>
      <link href="2020/062357779.html"/>
      <url>2020/062357779.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCP协议-UDP协议介绍"><a href="#TCP协议-UDP协议介绍" class="headerlink" title="TCP协议/UDP协议介绍"></a>TCP协议/UDP协议介绍</h1><ul><li>TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇， 只是因为在TCP/IP协议中TCP协议和IP协议最具代表性，所以被称为TCP/IP协议</li><li>下面我们来简要了解TCP/IP的四层模型:<br>网络接口层：负责将二进制流转换为数据帧，并进行数据帧的发送和接收。数据帧是网络信息传输的基本单元,ARP和RARP协议<br>网络层：负责将数据帧封装成IP数据报，同时负责选择数据报的路径，即路由，IP和ICMP协议<br>传输层：负责端到端之间的通信会话连接与建立，传输协议的选择根据数据传输方式而定,UDP和TCP协议<br>应用层：负责应用程序的网络访问，这里通过端口号来识别各个不同的进程，FTP、TELNET、DNS、SMTP、POP3 协议<br><img src="https://img-blog.csdnimg.cn/20200422164251742.png"></li><li>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。面向连接的是 TCP，该协议几乎做了所有的事情。</li><li>传输控制协议(TCP，Transmission Control Protocol) 是为了在不可靠的互联网络上提供可靠的端到端字节流而专门设计的一个传输协议。TCP是因特网中的传输层协议，使用三次握手协议建立连接。当主动方发出SYN连接请求后，等待对方回答SYN+ACK，并最终对对方的 SYN 执行 ACK 确认。这种建立连接的方法可以防止产生错误的连接，TCP使用的流量控制协议是可变大小的滑动窗口协议。  </li></ul><p><strong>TCP三次握手过程</strong><br>第一次握手：主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B，向主机B 请求建立连接，通过这个数据段， 主机A告诉主机B 两件事：我想要和你通信；你可以用哪个序列号作为起始数据段来回应我。<br>第二次握手：主机B 收到主机A的请求后，用一个带有确认应答（ACK）和同步序列号（SYN）标志位的数据段响应主机A，也告诉主机A两件事：我已经收到你的请求了，你可以传输数据了；你要用那个序列号作为起始数据段来回应我<br>第三次握手：主机A收到这个数据段后，再发送一个确认应答，确认已收到主机B 的数据段：”我已收到回复，我现在要开始传输实际数据了，这样3次握手就完成了，主机A和主机B 就可以传输数据了。<br><strong>TCP建立连接要进行3次握手，而断开连接要进行4次</strong><br>第一次： 当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求 ；<br>第二次： 主机B收到FIN后对其作出响应，确认这一方向上的TCP连接将关闭,将ACK置1；<br>第三次： 由B 端再提出反方向的关闭请求,将FIN置1 ；<br>第四次： 主机A对主机B的请求进行确认，将ACK置1，双方向的关闭结束.。<br>由TCP的三次握手和四次断开可以看出，TCP使用面向连接的通信方式， 大大提高了数据通信的可靠性，使发送数据端和接收端在数据正式传输前就有了交互， 为数据正式传输打下了可靠的基础。  </p><ul><li><strong>UDP(User Datagram Protocol)</strong> 全称是用户数据报协议,是一种非面向连接的协议,这种协议并不能保证我们的网络程序的连接是可靠的，而TCP是面向连接的，提供可靠的字节流。然而，有些情况下更适合用UDP而不是TCP。有些流行的应用程序是用UDP实现的：DNS（域名系统）、NFS（网络文件系统）和SNMP（简单网络管理协议）就是这样的例子。  </li></ul><p>1.UDP是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。 在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、 计算机的能力和传输带宽的限制； 在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。<br>2.由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等， 因此一台服务机可同时向多个客户机传输相同的消息。<br>3.UDP信息包的标题很短，只有8个字节，相对于TCP的20个字节信息包的额外开销很小。<br>4.吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、 源端和终端主机性能的限制。<br>5.UDP使用尽最大努力交付，即不保证可靠交付， 因此主机不需要维持复杂的链接状态表（这里面有许多参数）。<br>6.UDP是面向报文的。发送方的UDP对应用程序交下来的报文， 在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界， 因此，应用程序需要选择合适的报文大小。<br>我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常， 其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包， 如果数据包是否到达的消息及时反馈回来，那么网络就是通的。</p><ul><li><strong>小结TCP与UDP的区别：</strong><br>1、基于连接与无连接；<br>2、对系统资源的要求（TCP较多，UDP少）；<br>3、UDP程序结构较简单；<br>4、流模式与数据报模式 ；<br>5、TCP保证数据正确性，UDP可能丢包；<br>6、TCP保证数据顺序，UDP不保证。 ## 三种通信方式</li></ul><h1 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h1><p><img src="https://img-blog.csdnimg.cn/20200423132800473.png"><br>1、单向通信：又称为单工通信，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电广播以及电视广播就属于这种类型。<br>单向通信只需要一条信道，而双向交替通信或双向同时通信则都需要两条信道（每个方向各一条）。显然，双向同时通信的传输效率最高。不过应当指出，虽然电信局为打电话的用户提供了双向同时通信的信道，但有效的电话交谈一般都还是双方交替通信。当双方发生争吵时往往就是采用双向同时通信的方式。<br>2、半双工通信，是指数据可以沿两个方向传送．但同一时刻一个信道只允许单方向传送，因此义被称为双向交替通信。例如，无线对讲机就是一种半双工设备，在同一时间内只允许一方讲话。<br>3、全双工通信，是指同时发生在两个方向上的一种数据传输方式，如图中(c)所示。电话机就是一种全双工设备，其通话双方可以同时进行对话。计算机之间的高速数据通信也是这种方式。<br>双向交替通信又称为半双工通信，即通信的双方都可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式是一方发送另一方接收，过一段时间后再反过来。此次要实现的就是半双工通信</p><h1 id="实现TCP半双工通信"><a href="#实现TCP半双工通信" class="headerlink" title="实现TCP半双工通信"></a>实现TCP半双工通信</h1><p><strong>基于TCP协议的socket的server端程序编程步骤：</strong><br>1、建立socket ，使用socket()<br>2、绑定socket ，使用bind()<br>3、打开listening socket,使用listen()<br>4、等待client连接请求，使用accept()<br>5、收到连接请求，确定连接成功后，使用输入，输出函数recv(),send()与client端互传信息<br>6、关闭socket,使用close()  </p><p><strong>基于TCP协议的socket的Client程序编程步骤：</strong><br>1、建立socket，使用socket()<br>2、通知server请求连接，使用connect()<br>3、若连接成功，就使用输入输出函数recv(),send()与server互传信息<br>4、关闭socket，使用close()</p><h1 id="所用到的结构体与函数"><a href="#所用到的结构体与函数" class="headerlink" title="所用到的结构体与函数"></a>所用到的结构体与函数</h1><p>1.IPV4套接字地址结构体</p><pre><code>struct sockaddr_in{    uint8_t             sin_len;    sa_famliy_t         sin_fanliy;/*协议家族*/    in_port_t           sin_port;/*端口号*/    struct in_addr      sin_addr;/*IP地址，struct in_addr{in_addr_t s_addr;}*/    char                sin_zero[8];};</code></pre><p>2.通用套接字地址结构体：</p><pre><code>struct sockaddr{    uint8_t       sa_len;    sa_famliy     sa_famliy;    char          sa_data[14];};</code></pre><p>3.socket()：</p><pre><code>int socket(int domain,int type, int protocol);/*创建一个套接字：返回值：    创建成功返回一个文件描述符（0,1,2已被stdin、stdout、stderr占用，所以从3开始）    失败返回-1。参数：    domain为协议家族，TCP属于AF_INET（IPV4）；    type为协议类型，TCP属于SOCK_STREAM（流式套接字）；    最后一个参数为具体的协议（IPPOOTO_TCP为TCP协议，前两个已经能确定该参数是TCP，所以也可以填0）*/</code></pre><p>4.bind()：</p><pre><code>int bind(int sockfd,const struct sockaddr * addr,socklen_t addrlen);/*将创建的套接字与地址端口等绑定返回值：成功返回0，失败返回-1.参数：    sockfd为socket函数返回接受的文件描述符，    addr为新建的IPV4套接字结构体    注意：定义若是使用struct sockaddr_in（IPV4结构体）定义，但是该参数需要将struct sockaddr_in *类型地址强转为struct sockaddr *类型（struct sockaddr是通用类型）。    最后一个参数为该结构体所占字节数。*/</code></pre><p>5.listen()：  </p><pre><code>int listen(int sockfd,int backlog);/*对创建的套接字进行监听，监听有无客户请求连接返回值：有客户请求连接时，返回从已完成连接的队列中第一个连接（即完成了TCP三次握手的的所有连接组成的队列），否则处于阻塞状态（blocking）。参数：sockfd依然为socket函数返回的文件描述符；blocklog为设定的监听队列的长度。可设为5、10等值但是不能大于SOMAXCONN（监听队列最大长度）*/</code></pre><p>6.connect()和accept()：</p><pre><code>int connect(int sockfd,const struct sockaddr * addr,socklen_t addrlen);/*客户端请求连接返回值：成功返回0，失败返回-1参数：客户端的socket文件描述符，客户端的socket结构体地址以及结构体变量长度*/int accept(int sockfd,struct sockaddr * addr,socklen_t * addrlen);/*从监听队列中接收已完成连接的第一个连接返回值：成功返回0，失败返回-1参数：服务器socket未见描述符，服务器的socket结构体地址以及结构体变量长度*/</code></pre><p>7.send()和recv()：</p><pre><code>ssize_t send(int sockfd,const void * buf,size_t len,int flags);/*发送数据返回值：成功返回发送的字符数，失败返回-1参数：buf为写缓冲区（send_buf），len为发送缓冲区的大小，flags为一个标志，如MSG_OOB表示有紧急带外数据等*/ssize_t recv(int sockfd,void *buf, size_t len, int flags);/*接收数据返回值参数与send函数相似不过send是将buf中的数据向外发送，而recv是将接收到的数据写到buf缓冲区中。*/</code></pre><p>8.close()：</p><pre><code>int close(int fd);/*关闭套接字，类似于fclose，fd为要关闭的套接字文件描述符失败返回-1，成功返回0*/</code></pre><h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><p>服务端:<br><strong>tcp_server.c</strong></p><pre><code>#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;int main( int argc, char **argv ) /*接收IP地址和端口号*/{    int sid = socket(AF_INET,SOCK_STREAM,0);    //创建socket,第一个参数使用IPv4协议，第二个参数使用流的方式传播，第三个参数默认为0    struct sockaddr_in addr = {0};          //定义ip地址    addr.sin_family = AF_INET;              //声明协议用的是IPv4    addr.sin_port = htons(atoi(argv[2]));     //绑定到哪一个端口号当中,从第三个参数中获取    addr.sin_addr.s_addr = inet_addr(argv[1]); //监听哪一个ip地址,从第二个参数中获取    int res = bind(sid,(struct sockaddr *)&amp;addr,sizeof(struct sockaddr));//进行绑定,第二个参数为绑定的地址和端口号    printf("bind res = %d\n",res);    //绑定成功输出0,失败则输出-1    listen(sid,10);    //进行监听,第一个参数是监听哪一个socket,第二个是能接受的最大的连接数    char read_buf[128] = {0};  //储存客户端发来的信息    char write_buf[128] = {0}; //储存服务端发送的信息    int len,cid;    cid = accept(sid,NULL,NULL);//返回客户端的描述符,通过cid可以跟客户端通信    while(1)    {        bzero(read_buf,sizeof(read_buf)); //置字节字符串的前n个字节为零，达到清空之前的信息的目的        bzero(read_buf,sizeof(write_buf));        read(cid,read_buf,sizeof(read_buf)-1);        if(strcmp(read_buf,"quit\n") == 0) //如果收到的信息为quit便结束通信        {           printf("client quit the communication!\n");           break;        }           printf("client:%s",read_buf); //输出客户端发送的信息           printf("server:");                    fgets(write_buf,sizeof(write_buf),stdin);        write(cid,write_buf,strlen(write_buf));            if(strcmp(write_buf,"quit\n") == 0) //发出信息quit，结束本次通信        {           printf("sever quit the communication!\n");           break;        }    }    close(cid);    close(sid);    }</code></pre><p>客户端：<br><strong>tcp_client.c</strong></p><pre><code>#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;int main(int argc,char **argv) /*接收IP地址和端口号*/{    if(argc &lt; 3)        //参数必须为三个    {        perror("param must &gt;= 3");        return -1;    }    int cid = socket(AF_INET,SOCK_STREAM,0);     struct sockaddr_in saddr = {0};//存放要连接的服务器的ip地址和端口号    saddr.sin_family = AF_INET;    saddr.sin_port = htons(atoi(argv[2]));    saddr.sin_addr.s_addr = inet_addr(argv[1]);    int res = connect(cid,(struct sockaddr *)&amp;saddr,sizeof(struct sockaddr)); //跟服务器连接,成功返回0，失败返回-1    printf("connect res = %d\n",res);    char read_buf[128] = {0};    //储存客户端发来的信息    char write_buf[128] = {0};    //储存服务端发送的信息    while(1)    {        bzero(read_buf,sizeof(read_buf));   //置字节字符串的前n个字节为零，达到清空之前的信息的目的        bzero(write_buf,sizeof(write_buf));         printf("client:");        fgets(write_buf,sizeof(write_buf),stdin);        send(cid,write_buf,strlen(write_buf),0);        if(strcmp(write_buf,"quit\n") == 0) //如果发送的信息为quit便结束本次通信          {           printf("client quit the communication!\n");           break;        }        recv(cid,read_buf,sizeof(read_buf)-1,0);        if(strcmp(read_buf,"quit\n") == 0) //如果收到的信息为quit便结束通信        {           printf("sever quit the communication!\n");           break;        }        printf("server:%s",read_buf);    //输出客户端发送的信息    }    close(cid);}</code></pre><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>127.0.0.1是回送地址，指本地机，一般用来测试使用。回送地址（127.x.x.x）是本机回送地址（Loopback Address），即主机IP堆栈内部的IP地址，主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，协议软件立即返回，不进行任何网络传输。<br>在Windows系统中，这个地址有一个别名“Localhost”。寻址这样一个地址，是不能发到网络接口的。除非出错，否则在传输介质上永远不应该出现目的地址为“127.0.0.1”的数据包。<br><strong>运行程序需要打开Linux中打开两个终端,分别编译运行服务端和客户端的源文件,IP地址选择本地地址,端口号建议选择8000以上比较稳定比如9999,首先客户端发送信息到服务端,服务端在接收到客户端的信息后才可以回复,双方都可以输出quit来结束本次通信</strong><br>客户端：<br><img src="https://img-blog.csdnimg.cn/20200422175007901.png"><br>服务端：<br><img src="https://img-blog.csdnimg.cn/20200422175105211.png"></p><h1 id="实现UDP半双工通信"><a href="#实现UDP半双工通信" class="headerlink" title="实现UDP半双工通信"></a>实现UDP半双工通信</h1><p><strong>基于UDP协议的socket的接收端编程步骤：</strong><br>1、建立socket,使用socket()<br>2、绑定socket,使用bind()<br>3、以recvfrom()函数接收发送端传来的数据<br>4、关闭socket，使用close()  </p><p><strong>基于UDP协议的socket的发送端编程步骤：</strong><br>1、建立Socket，使socket()<br>2、用sendto()函数向接收端发送数据。<br>3、关闭socket，使用close()函数  </p><h1 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h1><p>接收端:<br><strong>udp_recvpp.c</strong></p><pre><code>#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc,char **argv){    if(argc &lt; 3)    {        perror("param must &gt;= 3");        return -1;    }    int cid = socket(AF_INET,SOCK_DGRAM,0);    if(cid &lt; 0)    {        perror("socket error");        return -1;    }    struct sockaddr_in addr = {0},sendaddr = {0};    addr.sin_family = AF_INET;    addr.sin_port = htons(atoi(argv[2]));    addr.sin_addr.s_addr = inet_addr(argv[1]);    int res = bind(cid,(struct sockaddr *)&amp;addr,sizeof(struct sockaddr));    printf("bind res = %d\n",res);    char read_buf[128] = {0};    char write_buf[128] = {0};    int size = sizeof(struct sockaddr);    while(1)    {        bzero(read_buf,sizeof(read_buf));        bzero(write_buf,sizeof(write_buf));        recvfrom(cid,read_buf,sizeof(read_buf) - 1,0,(struct sockaddr *)&amp;sendaddr,&amp;size);        if(strcmp(read_buf,"quit\n") == 0)        {           printf("send quit the communication!\n");           break;        }        char ipbuf[16] = {0};        inet_ntop(AF_INET,&amp;sendaddr.sin_addr.s_addr,ipbuf,sizeof(ipbuf));        printf("send:%s",read_buf);        printf("send addr: ip = %s,port = %d\n",ipbuf,ntohs(sendaddr.sin_port));         printf("recv:");        fgets(write_buf,sizeof(write_buf),stdin);        sendto(cid,write_buf,strlen(write_buf),0,(struct sockaddr *)&amp;sendaddr,sizeof(struct sockaddr));        if(strcmp(write_buf,"quit\n") == 0)        {           printf("you quit the communication!\n");           break;        }    }    close(cid);}</code></pre><p>发送端：<br><strong>udp_sendpp.c</strong></p><pre><code>#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc,char **argv){    if(argc &lt; 3)    {        perror("param must &gt;= 3");        return -1;    }    int cid = socket(AF_INET,SOCK_DGRAM,0);    if(cid &lt; 0)    {        perror("socket error");        return -1;    }    struct sockaddr_in addr = {0},sendaddr = {0};    addr.sin_family = AF_INET;    addr.sin_port = htons(atoi(argv[2]));    addr.sin_addr.s_addr = inet_addr(argv[1]);    int size = sizeof(struct sockaddr);       char read_buf[128] = {0};    char write_buf[128] = {0};    int len;    while(1)    {        bzero(read_buf,sizeof(read_buf));        bzero(write_buf,sizeof(write_buf));        printf("send:");        fgets(write_buf,sizeof(write_buf),stdin);     len = sendto(cid,write_buf,strlen(write_buf),0,(struct sockaddr *)&amp;addr,sizeof(struct sockaddr));       printf("send successful!!send len = %d\n",len);        if(strcmp(write_buf,"quit\n") == 0)        {           printf("you quit the communication!\n");           break;        }        recvfrom(cid,read_buf,sizeof(read_buf) - 1,0,(struct sockaddr *)&amp;sendaddr,&amp;size);        if(strcmp(read_buf,"quit\n") == 0)        {           printf("recv quit the communication!\n");           break;        }        printf("recv:%s",read_buf);    }    close(cid);}</code></pre><h1 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h1><p>发送端：<br><img src="https://img-blog.csdnimg.cn/20200422180906191.png"><br>接收端：<br><img src="https://img-blog.csdnimg.cn/20200422180929422.png"><br><strong>提示：本文章参考了网上几篇比较好的文章，所以会有雷同，作者知识知识点归纳的小蜜蜂^_^！</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 半双工通信 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年的一天，我做了个梦</title>
      <link href="2018/081133149.html"/>
      <url>2018/081133149.html</url>
      
        <content type="html"><![CDATA[<h1 id="清晨日记："><a href="#清晨日记：" class="headerlink" title="清晨日记："></a>清晨日记：</h1><p>今天是<strong>2018年</strong>的一天<br>我做了一个梦<br>梦到了一位男生<br>在他的胸口处烫上了一个<strong>烙印</strong>  </p><h3 id="而这个烙印："><a href="#而这个烙印：" class="headerlink" title="而这个烙印："></a>而这个烙印：</h3><ul><li>她非常的特别      <strong>[]</strong></li><li>她非常有爱心      <strong>❤</strong></li><li>她就像是一位女皇   <strong>Queen</strong><br>没错  </li></ul><p><strong>她就是那一位最大的最有爱心的最尊贵的”❤Q”女皇</strong><br>而这位男生的视角<strong>我是以第一人称看到的一切</strong><br><strong>包括在屏幕面前的你！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 魔术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术 </tag>
            
            <tag> 预言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
